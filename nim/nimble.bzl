
def _obtain_nimble(rctx):
    nimble_bin = rctx.os.environ.get("NIMBLE_BIN")
    if not nimble_bin:
        os_arch = rctx.os.arch
        os_name = rctx.os.name
        if os_arch == "amd64" and os_name == "linux":
            result = rctx.download_and_extract(
                url = "https://github.com/nim-lang/nimble/releases/download/v0.16.1/nimble-linux_x64.tar.gz",
                sha256 = "be0841d2be26fabf5ae594f2611021cde853ef74cbc288a9116a4848d1a0fe98"
            )
            if result.success:
                nimble_bin = "nimble"

    return nimble_bin

def _nimble_install_impl(rctx):

    nimble_bin = _obtain_nimble(rctx)
    rctx.symlink(rctx.attr.nimble_file, "file.nimble")

    rctx.execute(
        [
            nimble_bin,
            "-y",
            "--nimbleDir:.",
        ] + rctx.attr.nimble_attrs + [
            "install"
        ],
        quiet = rctx.attr.quiet,
    )
    deps = rctx.path(".").get_child("pkgs2").readdir()

    build_bazel_content = """# generated by nimble_install
load("@rules_nim//nim:defs.bzl", "nim_module")"""

    for dep in deps:
        pkg_fullname = dep.basename
        pkg_name = pkg_fullname.split("-")[0]

        lib_target = """
nim_module(
    name = "{pkg_name}",
    srcs = glob(["{pkgs_dir_prefix}/{pkg_fullname}/**/*"]),
    strip_import_prefix = "{pkgs_dir_prefix}/{pkg_fullname}",
    visibility = ["//visibility:public"],
)
""".format(
       pkgs_dir_prefix = rctx.attr.pkgs_dir_prefix,
       pkg_name = pkg_name,
       pkg_fullname = pkg_fullname,
    )
        build_bazel_content += lib_target

    rctx.file("BUILD.bazel", build_bazel_content, executable = False)

nimble_install = repository_rule(
    attrs = {
        "nimble_file": attr.label(),
        "nimble_attrs": attr.string_list(),
        "quiet": attr.bool(default = False),
        "pkgs_dir_prefix": attr.string(default = "pkgs2")
    },
    implementation = _nimble_install_impl,
)
